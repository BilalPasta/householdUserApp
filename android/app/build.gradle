apply plugin: "com.android.application"
apply plugin: "com.google.firebase.firebase-perf"

import com.android.build.OutputFile


project.ext.react = [
    entryFile: "index.js"
]

apply from: "../../node_modules/react-native/react.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "com.fyp"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        ndk {
            abiFilters "armeabi-v7a", "x86"
        }
		multiDexEnabled true
    }


    // signingConfigs {
    //     release {
    //         if (project.hasProperty('MYAPP_RELEASE_STORE_FILE')) {
    //             storeFile file(MYAPP_RELEASE_STORE_FILE)
    //             storePassword MYAPP_RELEASE_STORE_PASSWORD
    //             keyAlias MYAPP_RELEASE_KEY_ALIAS
    //             keyPassword MYAPP_RELEASE_KEY_PASSWORD
    //         }
    //     }
    // }

    signingConfigs {
release {
storeFile file(MYAPP_RELEASE_STORE_FILE)
storePassword MYAPP_RELEASE_STORE_PASSWORD
keyAlias MYAPP_RELEASE_KEY_ALIAS
keyPassword MYAPP_RELEASE_KEY_PASSWORD
}
}
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86"
        }
    }
    buildTypes {
        release {
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
                        signingConfig signingConfigs.release


        }
    }
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a":1, "x86":2]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }
}

dependencies {
        implementation project(':react-native-firebase')
         implementation (project(':react-native-maps')){
        exclude group: 'com.google.android.gms'
    }
    // compile project(':react-native-maps')
	// implementation(project(':react-native-maps')){
    //     exclude group: 'com.google.android.gms', module: 'play-services-base'
    //     exclude group: 'com.google.android.gms', module: 'play-services-maps'
    // }
	implementation 'com.google.firebase:firebase-perf:16.2.5'
	implementation 'com.google.android.gms:play-services-base:15.0.1'
	implementation 'com.google.android.gms:play-services-maps:15.0.1'


      implementation "com.google.firebase:firebase-core:16.0.1"
//    implementation 'com.google.firebase:firebase-core:16.0.8'

    implementation "com.google.firebase:firebase-database:16.0.1"
      implementation "com.google.firebase:firebase-auth:16.0.1"
    compile project(':react-native-facebook-account-kit')
    compile project(':react-native-vector-icons')
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "com.android.support:appcompat-v7:${rootProject.ext.supportLibVersion}"
    implementation "com.facebook.react:react-native:+"  // From node_modules
	// compile ("com.google.android.gms:play-services-base:11.8.0") {
    //     force = true;
    // }
    // compile ("com.google.android.gms:play-services-maps:11.8.0") {
    //     force = true;
    // }
    // compile ("com.google.android.gms:play-services-gcm:11.8.0") {
    //     force = true;
    // }
    // compile ('com.google.firebase:firebase-core:11.8.0') {
    //     force = true;
    // }
    // compile ('com.google.firebase:firebase-messaging:11.8.0') {
    //     force = true;
    // }
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
	
	configurations.all {
    resolutionStrategy {
        force 'com.android.support:support-v4:27.1.0'
    }
}
}
apply plugin: 'com.google.gms.google-services'



com.google.gms.googleservices.GoogleServicesPlugin.config.disableVersionCheck = true
